name: Go CI/CD

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.x'  # Use the latest Go version

      - name: Run tests
        run: go test -v ./...

  get-commit-messages:
    name: Get Commit Messages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get commit messages
        id: get_commit_messages
        run: echo "::set-output name=commit_messages::$(git log --pretty=format:'%s' ${{ github.event.before }}..${{ github.sha }})"

  build-binary:
    name: Build Binary and Release
    runs-on: ubuntu-latest

    needs: [test, get-commit-messages]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.x'  # Use the latest Go version

      - name: Build Binary
        run: go build

      - name: Get latest release tag
        id: get_latest_release
        run: |
          tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "::set-output name=release_tag::${tag}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_latest_release.outputs.release_tag || 'v1.00' }}
          release_name: Release ${{ steps.get_latest_release.outputs.release_tag || 'v1.00' }}
          body: |
            Automated release from CI/CD.
            
            Commit messages since last release:
            ${{ steps.get_commit_messages.outputs.commit_messages }}
          draft: false
          prerelease: false

  build-docker:
    name: Build Docker Container
    runs-on: ubuntu-latest

    needs: [build-binary]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.x'  # Use the latest Go version

      - name: Build Binary
        run: go build

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ steps.create_release.outputs.tag_name }} .

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ steps.create_release.outputs.tag_name }}
