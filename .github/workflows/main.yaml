name: Go CI/CD

on:
  push:
    branches:
      - main

jobs:
  check-go-changes:
    name: Check Go Code Changes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for Go code changes
        id: go_changes
        run: |
          if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -qE '\.go$'; then
            echo "Go code was modified, running tests..."
            echo "::set-output name=go_changed::true"
          else
            echo "No changes to Go code, skipping tests."
            echo "::set-output name=go_changed::false"
          fi

  get-latest-release-tag:
    name: Get Latest Release Tag
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get_latest_tag.outputs.release_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get latest release tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null) || true
          if [ -z "$latest_tag" ]; then
            echo "No existing tags found."
            echo "::set-output name=release_tag::1.0.0"
          else
            echo "Latest release found: $latest_tag"
            echo "::set-output name=release_tag::$latest_tag"
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [check-go-changes, get-latest-release-tag]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.x'  # Use the latest Go version

      - name: Run tests
        run: go test -v ./...

  build-binary:
    name: Build Binary and Release
    runs-on: ubuntu-latest
    needs: [test, get-latest-release-tag]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.x'  # Use the latest Go version

      - name: Build Binary
        run: |
          go build
          readlink -f gnoland-metrics

      - name: Upload Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.repository.releases_url }}
          asset_path: ./gnoland-metrics
          asset_name: gnoland-metrics
          asset_content_type: application/octet-stream

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-latest-release-tag.outputs.release_tag }}
          release_name: Release ${{ needs.get-latest-release-tag.outputs.release_tag }}
          body: Automated release from CI/CD.
          draft: false
          prerelease: false

  build-docker:
    name: Build Docker Container
    runs-on: ubuntu-latest
    needs: [build-binary, get-latest-release-tag]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.x'  # Use the latest Go version

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ needs.get-latest-release-tag.outputs.release_tag }} .
          docker tag ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ needs.get-latest-release-tag.outputs.release_tag }} ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ needs.get-latest-release-tag.outputs.release_tag }}
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest

  handle-docker-build-failure:
    name: Handle Docker Build Failure
    runs-on: ubuntu-latest
    needs: [build-docker]

    steps:
      - name: Check Docker build status
        id: docker_build
        run: exit ${{ job.status }}

      - name: Run cleanup
        if: steps.docker_build.outcome == 'failure'
        run: |
          echo "Docker build failed, deleting release and tag..."

          TAG_NAME="${{ needs.get-latest-release-tag.outputs.release_tag }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          REPO_NAME="${{ github.event.repository.name }}"
          OWNER="${{ github.repository_owner }}"

          # Check if the tag exists before attempting to delete it
          if [[ -n "$TAG_NAME" ]]; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$OWNER/$REPO_NAME/git/refs/tags/$TAG_NAME"
            echo "Tag deleted successfully: $TAG_NAME"
          else
            echo "Tag does not exist."
          fi

          # Get the release ID
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$OWNER/$REPO_NAME/releases/tags/$TAG_NAME" | jq -r '.id')

          # Check if the release ID is valid before attempting to delete the release
          if [[ -n "$RELEASE_ID" && "$RELEASE_ID" != "null" ]]; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$OWNER/$REPO_NAME/releases/$RELEASE_ID"
            echo "Release deleted successfully: $RELEASE_ID"
          else
            echo "Release does not exist or could not be deleted."
          fi

      - name: Fail the workflow
        run: exit 1
